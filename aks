#!/bin/bash

# Developer: Daniel Garcia Alonso
# Contact: Garcia Alonso Daniel <daniescorpio@hotmail.es>
# Version 0.9.0
# Version date: 2024-02-13


########## USER CONFIGURATION ##########

# Configure temporal path to save logs
readonly TMP_LOG_FILE="/Users/x369250/Library/Application Support/JetBrains/IntelliJIdea2023.1/scratches/log.log"

# Configure default browser to open
readonly DEFAULT_BROWSER="Google Chrome"

# Configure environments servers
readonly DEV_CONTEXT="gtsd1weuaksgtsakscrit001"
readonly PRE_CONTEXT="gtsi1weuaksgtsakscrit001"
readonly PRO_CONTEXT="gtsp1weuaksgtsakscrit001"

# Configure default namespace
declare NAMESPACE="gts-payments"

########################################



# Configure colors
declare BYellow='\033[1;93m'	# Yellow
declare Yellow='\033[0;33m'		# Yellow
declare Green='\033[0;32m'		# Green
declare BGreen='\033[1;32m'		# Green
declare Blue='\033[0;34m'		# Blue
declare Cyan='\033[0;36m'		# Cyan
declare IBlue='\033[0;94m'		# Blue
declare BIRed="\033[1;91m"		# Red
declare Color_Off='\033[0m'		# Text Reset


# Global variables
declare context
declare recent_pods=()
declare selected_pod_name

show_connection_context() {

	echo
	echo -e "${Blue}  ----------------- ${IBlue}CONECTION CONTEXT ${Blue}-----------------  ${Color_Off}"
	echo 
	if [[ "$context" = "$DEV_CONTEXT" ]]; then
		echo -e "  ${BYellow}CONECTED TO: ${BGreen}DEV ${Green}($context)${Color_Off}"
	elif [[ "$context" = "$PRE_CONTEXT" ]]; then
		echo -e "  ${BYellow}CONECTED TO: ${BGreen}PRE ${Green}($context)${Color_Off}"
	elif [[ "$context" = "$PRO_CONTEXT" ]]; then
		echo -e "  ${BYellow}CONECTED TO: ${BGreen}PRO ${Green}($context)${Color_Off}"
	fi
	echo
	echo -e "  ${BYellow}ACTIVE NAMESPACE: ${Green}$NAMESPACE${Color_Off}"
	echo
	echo -e "${Blue}  -----------------------------------------------------  ${Color_Off}"
	echo

}

show_main_menu() {

	clear

	show_connection_context

	echo -e "${Blue}##########################################################${Color_Off}"
	echo -e "${Blue}##                                                      ##${Color_Off}"
	echo -e "${Blue}##                    ${BYellow}Local AKS helper                  ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                      ##${Color_Off}"
	echo -e "${Blue}##   -------------------------------------------------  ##${Color_Off}"
	echo -e "${Blue}##                                                      ##${Color_Off}"
	echo -e "${Blue}##   ${BYellow}1.${Color_Off} Change environment                              ${Blue}##${Color_Off}"
	echo -e "${Blue}##   ${BYellow}2.${Color_Off} Change active namespace                         ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                      ##${Color_Off}"
	if [[ "$context" = "$DEV_CONTEXT" ]]; then
		echo -e "${Blue}##   ${BYellow}3.${Color_Off} Show ${BGreen}DEV${Color_Off} Pods                                   ${Blue}##${Color_Off}"
		echo -e "${Blue}##   ${BYellow}4.${Color_Off} Show ${BGreen}DEV${Color_Off} services hosts ${Cyan}(application name)      ${Blue}##${Color_Off}"
		echo -e "${Blue}##   ${BYellow}5.${Color_Off} Show ${BGreen}DEV${Color_Off} services images ${Cyan}(application name)     ${Blue}##${Color_Off}"
	elif [[ "$context" = "$PRE_CONTEXT" ]]; then
		echo -e "${Blue}##   ${BYellow}3.${Color_Off} Show ${BGreen}PRE${Color_Off} Pods                                   ${Blue}##${Color_Off}"
		echo -e "${Blue}##   ${BYellow}4.${Color_Off} Show ${BGreen}PRE${Color_Off} services hosts ${Cyan}(application name)      ${Blue}##${Color_Off}"
		echo -e "${Blue}##   ${BYellow}5.${Color_Off} Show ${BGreen}PRE${Color_Off} services images ${Cyan}(application name)     ${Blue}##${Color_Off}"
	elif [[ "$context" = "$PRO_CONTEXT" ]]; then
		echo -e "${Blue}##   ${BYellow}3.${Color_Off} Show ${BGreen}PRO${Color_Off} Pods                                   ${Blue}##${Color_Off}"
		echo -e "${Blue}##   ${BYellow}4.${Color_Off} Show ${BGreen}PRO${Color_Off} services hosts ${Cyan}(application name)      ${Blue}##${Color_Off}"
		echo -e "${Blue}##   ${BYellow}5.${Color_Off} Show ${BGreen}PRO${Color_Off} services images ${Cyan}(application name)     ${Blue}##${Color_Off}"
	fi
	echo -e "${Blue}##                                                      ##${Color_Off}"
	echo -e "${Blue}##   ${BYellow}6.${Color_Off} Show pod logs ${Cyan}(pod name)                        ${Blue}##${Color_Off}"
	echo -e "${Blue}##   ${BYellow}7.${Color_Off} Save pod logs in temp file ${Cyan}(pod name)           ${Blue}##${Color_Off}"
	echo -e "${Blue}##   ${BYellow}8.${Color_Off} Save pod logs in file ${Cyan}(pod name) (file name)    ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                      ##${Color_Off}"
	echo -e "${Blue}##   ${BYellow}9.${Color_Off} Rollout application ${Cyan}(application name)          ${Blue}##${Color_Off}"
	echo -e "${Blue}##  ${BYellow}10.${Color_Off} Pod shell console ${Cyan}(pod name)          ${Blue}          ##${Color_Off}"
	echo -e "${Blue}##                                                      ##${Color_Off}"
	echo -e "${Blue}##                                                      ##${Color_Off}"
	echo -e "${Blue}##   ${BYellow}0.${Color_Off} Exit AKS helper                                 ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                      ##${Color_Off}"
	echo -e "${Blue}##########################################################${Color_Off}"
	echo 

}

change_environment() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##                   ${BYellow}SELECT ENVIRONMENT                ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##  -------------------------------------------------  ##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##  ${BYellow}1.${Color_Off} DEV                                             ${Blue}##${Color_Off}"
	echo -e "${Blue}##  ${BYellow}2.${Color_Off} PRE                                             ${Blue}##${Color_Off}"
	echo -e "${Blue}##  ${BYellow}3.${Color_Off} PRO                                             ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	
	echo
	echo
	echo -e -n "${Cyan}Enter new active environment (Left empty to go back menu): ${Color_Off}"
	read environment
	echo

	if [ -n "$environment" ]; then
		case $environment in 
			1) 
				kubectl config use-context $DEV_CONTEXT 
				echo
				echo -e "${Green}DEV: $(kubectl config current-context)${Color_Off} now is the active environment"
				recent_pods=()
				selected_pod_name=''
				;;
			2) 
				kubectl config use-context $PRE_CONTEXT 
				echo
				echo -e "${Green}PRE: $(kubectl config current-context)${Color_Off} now is the active environment"
				recent_pods=()
				selected_pod_name=''
				;;
			3) 
				kubectl config use-context $PRO_CONTEXT 
				echo
				echo -e "${Green}PRO: $(kubectl config current-context)${Color_Off} now is the active environment"
				recent_pods=()
				selected_pod_name=''
				;;
			*) echo "Unknown environment selected, please enter a valid option"
		esac
	fi
	echo

}

change_namespace() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##               ${BYellow}SELECT ACTIVE NAMESPACE               ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo
	echo

	kubectl get namespace

	echo
	echo
	echo
	echo -e -n "${Cyan}Enter new active namespace (Left empty to go back menu): ${Color_Off}"
	read namespace
	if [ -n "$namespace" ]; then
		export NAMESPACE="$namespace"
		echo
		echo -e "${Green}$NAMESPACE${Color_Off} now is the active namespace"
	fi

}

show_pods() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	if [[ "$context" = "$DEV_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}PODS - ${BGreen}DEV                      ${Blue}##${Color_Off}"
	elif [[ "$context" = "$PRE_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}PODS - ${BGreen}PRE                      ${Blue}##${Color_Off}"
	elif [[ "$context" = "$PRO_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}PODS - ${BGreen}PRO                      ${Blue}##${Color_Off}"
	fi

	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo
	echo

	kubectl get pods --namespace $NAMESPACE
	echo
	echo
	echo

	# Filter by name
	echo -e -n "${Cyan}Filter by pod name (Or press enter to go main menu): ${Color_Off}"
	read filter
	if [ -n "$filter" ]; then
		echo
		echo
		kubectl get pods --namespace $NAMESPACE | grep -i "$filter"

		# Select pod name if filter returns one result
		output_array=()
		while IFS= read -r line; do
			output_array+=("$line")
		done < <(kubectl get pods --namespace $NAMESPACE | grep -i "$filter")
		lines=${#output_array[@]}
		if [[ $lines -eq 1 ]]; then
			selected_pod_name="$(echo "${output_array[0]}" | awk '{print $1}')"
			echo 
			echo -e "${BYellow}$selected_pod_name${Color_Off} saved as default"
		fi

	fi

}

show_services_host() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	if [[ "$context" = "$DEV_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}HOSTS - ${BGreen}DEV                     ${Blue}##${Color_Off}"
	elif [[ "$context" = "$PRE_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}HOSTS - ${BGreen}PRE                     ${Blue}##${Color_Off}"
	elif [[ "$context" = "$PRO_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}HOSTS - ${BGreen}PRO                     ${Blue}##${Color_Off}"
	fi

	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo
	echo

	kubectl get ingresses --namespace $NAMESPACE
	echo
	echo
	echo

	echo -e -n "${Cyan}Filter by service name (Or press enter to go main menu): ${Color_Off}"
	read filter
	if [ -n "$filter" ]; then
		echo
		echo
		kubectl get ingresses --namespace $NAMESPACE | grep -i "$filter"
	fi

}

show_services_images() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	if [[ "$context" = "$DEV_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}IMAGES - ${BGreen}DEV                    ${Blue}##${Color_Off}"
	elif [[ "$context" = "$PRE_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}IMAGES - ${BGreen}PRE                    ${Blue}##${Color_Off}"
	elif [[ "$context" = "$PRO_CONTEXT" ]]; then
		echo -e "${Blue}##                     ${BYellow}IMAGES - ${BGreen}PRO                    ${Blue}##${Color_Off}"
	fi

	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo
	echo

	kubectl get pods -n $NAMESPACE -o jsonpath="{.items[*].spec['initContainers', 'containers'][*].image}" | 
	\tr -s '[[:space:]]' '\n' | 
	\sort | 
	\uniq -c | 
	awk -F ' ' '{print $2}'
	
	echo
	echo
	echo

	echo -e -n "${Cyan}Filter by service name (Or press enter to go main menu): ${Color_Off}"
	read filter
	if [ -n "$filter" ]; then
		echo
		echo
		
		kubectl get pods -n $NAMESPACE -o jsonpath="{.items[*].spec['initContainers', 'containers'][*].image}" | 
		\tr -s '[[:space:]]' '\n' | 
		\sort | 
		\uniq -c | 
		awk -F ' ' '{print $2}' | 
		grep -i "$filter"
	fi

}

pod_logs() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##                       ${BYellow}POD LOGS                      ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo

	if [[ ${#recent_pods[@]} -gt 0 ]]; then
		echo -e "${Blue}  ---------------- ${IBlue}RECENT PODS VIEWED ${Blue}-----------------  ${Color_Off}"
		echo
		for (( i = 0; i < ${#recent_pods[@]}; i++ )); do
			echo -e "  ${BYellow}$((i+1)).${Color_Off} ${recent_pods[i]}"
		done
		echo 
		echo -e "${Blue}  -----------------------------------------------------  ${Color_Off}"
		echo 
		echo
	fi

	if [[ ${#recent_pods[@]} -gt 0 ]]; then

		if [[ -n "$selected_pod_name" ]]; then
			echo -e -n "${Cyan}Enter pod name, index or press enter to retrieve logs of pod ${BYellow}$selected_pod_name${Cyan}: ${Color_Off}"
		else
			echo -e -n "${Cyan}Enter pod name or index in recent pods viewed: ${Color_Off}"
		fi
		read podName

	else
		if [[ -n "$selected_pod_name" ]]; then
			echo -e -n "${Cyan}Enter pod name or press enter to retrieve logs of pod ${BYellow}$selected_pod_name${Cyan}: ${Color_Off}"
		else
			echo -e -n "${Cyan}Enter pod name: ${Color_Off}"
		fi
		read podName
	fi

	echo

	# Selection pod from recent pods
	if [[ "$podName" =~ ^[0-9]+$ ]]; then 
		echo
		echo -e -n "${Cyan}Enter text to filter by or left empty to show full log: ${Color_Off}"
		read filterBy
		if [ -n "$filterBy" ]; then
			echo
			kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE | grep -i "$filterBy"

			# Refresh
			while true; do
				echo

				printf "\033]0; ${recent_pods[$((podName-1))]} \007"

				echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
				read -n 1 refreshLogs
				case $refreshLogs in
					[Rr]*) 
						echo
						kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE | grep -i "$filterBy"
						;;
					*) break 
						printf "\033]0; Kubernetes Helper \007"
						;;
				esac
			done

		else
			echo
			kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE

			# Refresh
			while true; do
				echo

				printf "\033]0; ${recent_pods[$((podName-1))]} \007"

				echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
				read -n 1 refreshLogs
				case $refreshLogs in
					[Rr]*) 
						clear
						echo
						kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE
						;;
					*) break 
						printf "\033]0; Kubernetes Helper \007"
						;;
				esac
			done

		fi
	
	# Selection pod by name
	else
		if [[ ! -n "$podName" ]]; then
			podName=$selected_pod_name
		fi
		echo -e -n "${Cyan}Enter text to filter by or left empty to show full log: ${Color_Off}"
		read filterBy
		if [ -n "$filterBy" ]; then
			echo

			printf "\033]0; $podName \007"
			
			kubectl logs $podName --namespace $NAMESPACE | grep -i "$filterBy"

			# Refresh
			while true; do
				echo
				echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
				read -n 1 refreshLogs
				case $refreshLogs in
					[Rr]*)
						clear 
						echo
						kubectl logs $podName --namespace $NAMESPACE | grep -i "$filterBy"
						;;
					*) break 
						printf "\033]0; Kubernetes Helper \007"
						;;
				esac
			done

		else
			echo

			printf "\033]0; $podName \007"

			kubectl logs $podName --namespace $NAMESPACE

			# Refresh
			while true; do
				echo
				echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
				read -n 1 refreshLogs
				case $refreshLogs in
					[Rr]*) 
						clear
						echo
						kubectl logs $podName --namespace $NAMESPACE
						;;
					*) break 
						printf "\033]0; Kubernetes Helper \007"
						;;
				esac
			done

		fi

		if [[ ! " ${recent_pods[@]} " =~ " $podName " ]]; then
			recent_pods=("$podName" "${recent_pods[@]}")
			recent_pods=("${recent_pods[@]:0:5}")
		fi
	fi

}

pod_logs_tmp_file() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##               ${BYellow}SAVE POD LOGS IN TEMP FILE            ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo

	# Recent pods list
	if [[ ${#recent_pods[@]} -gt 0 ]]; then
		echo -e "${Blue}  ---------------- ${IBlue}RECENT PODS VIEWED ${Blue}-----------------  ${Color_Off}"
		echo
		for (( i = 0; i < ${#recent_pods[@]}; i++ )); do
			echo -e "  ${BYellow}$((i+1)).${Color_Off} ${recent_pods[i]}"
		done
		echo 
		echo -e "${Blue}  -----------------------------------------------------  ${Color_Off}"
		echo
	fi

	if [[ ${#recent_pods[@]} -gt 0 ]]; then

		if [[ -n "$selected_pod_name" ]]; then
			echo -e -n "${Cyan}Enter pod name, index or press enter to retrieve logs of pod ${BYellow}$selected_pod_name${Cyan}: ${Color_Off}"
		else
			echo -e -n "${Cyan}Enter pod name or index in recent pods viewed: ${Color_Off}"
		fi
		read podName

	else
		if [[ -n "$selected_pod_name" ]]; then
			echo -e -n "${Cyan}Enter pod name or press enter to retrieve logs of pod ${BYellow}$selected_pod_name${Cyan}: ${Color_Off}"
		else
			echo -e -n "${Cyan}Enter pod name: ${Color_Off}"
		fi
		read podName
	fi

	echo
	
	# Select a pod from recent pods list
	if [[ "$podName" =~ ^[0-9]+$ ]]; then 
		kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE > "$TMP_LOG_FILE"
		echo
		
		printf "\033]0; ${recent_pods[$((podName-1))]} \007"

		echo "Logs of pod ${recent_pods[$((podName-1))]} saved in file '$TMP_LOG_FILE'"

		# Open file in browser
		echo 
		echo -e -n "Do you want to open file in browser? (y/n): "
		read -n 1 openBrowser
		case $openBrowser in
			[Yy]*) 
				open -a "$DEFAULT_BROWSER" "$TMP_LOG_FILE" 
				echo
				;;
			*) echo ;;
		esac

		# Refresh
		while true; do
			echo
			echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
			read -n 1 refreshLogs
			case $refreshLogs in
				[Rr]*) 
					echo
					kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE > "$TMP_LOG_FILE"
					echo
					echo "Logs of pod ${recent_pods[$((podName-1))]} refreshed in file '$TMP_LOG_FILE'"
					;;
				*) break 
					printf "\033]0; Kubernetes Helper \007"
					;;
			esac
		done

	# Select a pod by typing pod name
	else
		if [[ ! -n "$podName" ]]; then
			podName=$selected_pod_name
		fi
		kubectl logs $podName --namespace $NAMESPACE > "$TMP_LOG_FILE"
		echo

		printf "\033]0; $podName \007"

		echo "Logs of pod $podName saved in file '$TMP_LOG_FILE'"

		# Open file in browser
		echo 
		echo -e -n "Do you want to open file in browser? (y/n): "
		read -n 1 openBrowser
		case $openBrowser in
			[Yy]*) 
				open -a "$DEFAULT_BROWSER" "$TMP_LOG_FILE"
				echo
				;;
			*) echo ;;
		esac

		# Refresh
		while true; do
			echo
			echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
			read -n 1 refreshLogs
			case $refreshLogs in
				[Rr]*) 
					echo
					kubectl logs $podName --namespace $NAMESPACE > "$TMP_LOG_FILE"
					echo
					echo "Logs of pod $podName refreshed in file '$TMP_LOG_FILE'"

					echo 
					;;
				*) break 
					printf "\033]0; Kubernetes Helper \007"
					;;
			esac
		done

		# Save pod in recent pods list
		if [[ ! " ${recent_pods[@]} " =~ " $podName " ]]; then
			recent_pods=("$podName" "${recent_pods[@]}")
			recent_pods=("${recent_pods[@]:0:5}")
		fi
	fi

}

pod_logs_file_path() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##                 ${BYellow}SAVE POD LOGS IN FILE               ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo
	timestamp=$(date +"%Y%m%d-%H%M%S")
	
	# Recent pods list
	if [[ ${#recent_pods[@]} -gt 0 ]]; then
		echo -e "${Blue}  ---------------- ${IBlue}RECENT PODS VIEWED ${Blue}-----------------  ${Color_Off}"
		echo
		for (( i = 0; i < ${#recent_pods[@]}; i++ )); do
			echo -e "  ${BYellow}$((i+1)).${Color_Off} ${recent_pods[i]}"
		done
		echo 
		echo -e "${Blue}  -----------------------------------------------------  ${Color_Off}"
		echo
	fi

	if [[ ${#recent_pods[@]} -gt 0 ]]; then

		if [[ -n "$selected_pod_name" ]]; then
			echo -e -n "${Cyan}Enter pod name, index or press enter to retrieve logs of pod ${BYellow}$selected_pod_name${Cyan}: ${Color_Off}"
		else
			echo -e -n "${Cyan}Enter pod name or index in recent pods viewed: ${Color_Off}"
		fi
		read podName

	else
		if [[ -n "$selected_pod_name" ]]; then
			echo -e -n "${Cyan}Enter pod name or press enter to retrieve logs of pod ${BYellow}$selected_pod_name${Cyan}: ${Color_Off}"
		else
			echo -e -n "${Cyan}Enter pod name: ${Color_Off}"
		fi
		read podName
	fi

	echo

	# Select a pod from recent pods list
	if [[ "$podName" =~ ^[0-9]+$ ]]; then 
		echo -e -n "${Cyan}Enter file path to save logs ${Color_Off}($(pwd)): "
		read filePath

		# Save logs file in custom path
		if [ -n "$filePath" ]; then
			if [[ -d "$(pwd)/$filePath" ]]; then
				echo "$(pwd)/$filePath directory already exists"
			else
				echo "$(pwd)/$filePath does not exists, generating path"
				mkdir -p "$(pwd)/$filePath"
			fi
			kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE > "$(pwd)/$filePath/${recent_pods[$((podName-1))]}_$timestamp.log"
			echo

			printf "\033]0; ${recent_pods[$((podName-1))]} \007"
			
			echo "Logs of pod ${recent_pods[$((podName-1))]} saved in file '$(pwd)/$filePath/${recent_pods[$((podName-1))]}_$timestamp.log'"

			# Open file in browser
			echo 
			echo -e -n "Do you want to open file in browser? (y/n): "
			read -n 1 openBrowser
			case $openBrowser in
				[Yy]*) 
					if [ -n "$filePath" ]; then
						open -a "$DEFAULT_BROWSER" "$(pwd)/$filePath/${recent_pods[$((podName-1))]}_$timestamp.log"
						echo
					else
						open -a "$DEFAULT_BROWSER" "$(pwd)/${recent_pods[$((podName-1))]}_$timestamp.log"
						echo
					fi
					;;
				*) echo ;;
			esac

			# Refresh
			while true; do
				echo
				echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
				read -n 1 refreshLogs
				case $refreshLogs in
					[Rr]*) 
						echo
						kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE > "$(pwd)/$filePath/${recent_pods[$((podName-1))]}_$timestamp.log"
						echo
						echo "Logs of pod ${recent_pods[$((podName-1))]} refreshed in file '$(pwd)/$filePath/${recent_pods[$((podName-1))]}_$timestamp.log'"
						;;
					*) break 
						printf "\033]0; Kubernetes Helper \007"
						;;
				esac
			done

		# Save logs file in default path
		else
			kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE > "$(pwd)/${recent_pods[$((podName-1))]}_$timestamp.log"
			echo
			
			printf "\033]0; ${recent_pods[$((podName-1))]} \007"

			echo "Logs of pod ${recent_pods[$((podName-1))]} saved in file '$(pwd)/${recent_pods[$((podName-1))]}_$timestamp.log'"

			# Open file in browser
			echo 
			echo -e -n "Do you want to open file in browser? (y/n): "
			read -n 1 openBrowser
			case $openBrowser in
				[Yy]*) 
					if [ -n "$filePath" ]; then
						open -a "$DEFAULT_BROWSER" "$(pwd)/$filePath/${recent_pods[$((podName-1))]}_$timestamp.log"
						echo
					else
						open -a "$DEFAULT_BROWSER" "$(pwd)/${recent_pods[$((podName-1))]}_$timestamp.log"
						echo
					fi
					;;
				*) echo ;;
			esac

			# Refresh
			while true; do
				echo
				echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
				read -n 1 refreshLogs
				case $refreshLogs in
					[Rr]*) 
						echo
						kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE > "$(pwd)/${recent_pods[$((podName-1))]}_$timestamp.log"
						echo
						echo "Logs of pod ${recent_pods[$((podName-1))]} refreshed in file '$(pwd)/${recent_pods[$((podName-1))]}_$timestamp.log'"
						;;
					*) break 
						printf "\033]0; Kubernetes Helper \007"
						;;
				esac
			done

		fi

	# Select a pod by typing pod name
	else
		if [[ ! -n "$podName" ]]; then
			podName=$selected_pod_name
		fi
		echo -e -n "${Cyan}Enter file path to save logs ${Color_Off}($(pwd)): "
		read filePath

		# Save logs file in custom file path
		if [ -n "$filePath" ]; then
			if [[ -d "$(pwd)/$filePath" ]]; then
				echo "$(pwd)/$filePath directory already exists"
			else
				echo "$(pwd)/$filePath does not exists, generating path"
				mkdir -p "$(pwd)/$filePath"
			fi
			kubectl logs $podName --namespace $NAMESPACE > "$(pwd)/$filePath/${podName}_$timestamp.log"
			echo

			printf "\033]0; $podName \007"

			echo "Logs of pod $podName saved in file '$(pwd)/$filePath/${podName}_$timestamp.log'"

			# Open file in browser
			echo 
			echo -e -n "Do you want to open file in browser? (y/n): "
			read -n 1 openBrowser
			case $openBrowser in
				[Yy]*) 
					if [ -n "$filePath" ]; then
						open -a "$DEFAULT_BROWSER" "$(pwd)/$filePath/${recent_pods[$((podName-1))]}_$timestamp.log"
						echo
					else
						open -a "$DEFAULT_BROWSER" "$(pwd)/${recent_pods[$((podName-1))]}_$timestamp.log"
						echo
					fi
					;;
				*) echo ;;
			esac

			# Refresh
			while true; do
				echo
				echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
				read -n 1 refreshLogs
				case $refreshLogs in
					[Rr]*) 
						echo
						kubectl logs $podName --namespace $NAMESPACE > "$(pwd)/$filePath/${podName}_$timestamp.log"
						echo
						echo "Logs of pod $podName refreshed in file '$(pwd)/$filePath/${podName}_$timestamp.log'"
						;;
					*) break 
						printf "\033]0; Kubernetes Helper \007"
						;;
				esac
			done

		# Save logs file in default path
		else
			kubectl logs $podName --namespace $NAMESPACE > "$(pwd)/${podName}_$timestamp.log"
			echo

			printf "\033]0; $podName \007"

			echo "Logs of pod $podName saved in file '$(pwd)/${podName}_$timestamp.log'"

			# Open file in browser
			echo 
			echo -e -n "Do you want to open file in browser? (y/n): "
			read -n 1 openBrowser
			case $openBrowser in
				[Yy]*) 
					if [ -n "$filePath" ]; then
						open -a "$DEFAULT_BROWSER" "$(pwd)/$filePath/${podName}_$timestamp.log"
						echo
					else
						open -a "$DEFAULT_BROWSER" "$(pwd)/${podName}_$timestamp.log"
						echo
					fi
					;;
				*) echo ;;
			esac

			# Refresh
			while true; do
				echo
				echo -e -n "${Cyan}Press r to refresh logs or enter to go back menu... ${Color_Off}"
				read -n 1 refreshLogs
				case $refreshLogs in
					[Rr]*) 
						echo
						kubectl logs $podName --namespace $NAMESPACE > "$(pwd)/${podName}_$timestamp.log"
						echo
						echo "Logs of pod $podName refreshed in file '$(pwd)/${podName}_$timestamp.log'"
						;;
					*) break 
						printf "\033]0; Kubernetes Helper \007"
						;;
				esac
			done

		fi
		echo

		# Save pod in recent pods list
		if [[ ! " ${recent_pods[@]} " =~ " $podName " ]]; then
			recent_pods=("$podName" "${recent_pods[@]}")
			recent_pods=("${recent_pods[@]:0:5}")
		fi
	
	fi

}

rollout_app() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##                  ${BYellow}ROLLOUT APPLICATION                ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo
	echo
	
	timestamp=$(date +"%Y%m%d-%H%M%S")

	if [ ! -d "$(pwd)/restartedApplicationsLogs" ]; then
		mkdir -p "$(pwd)/restartedApplicationsLogs"
	fi

	if [[ "$context" = "$PRO_CONTEXT" ]]; then
		echo  -e "${BIRed}¡¡¡ ROLLOUT CANNOT BE APPLIED IN PRO ENVIRONMENT !!!${Color_Off}"
		return 1
	fi

	echo -e -n "${Cyan}Enter application name: ${Color_Off}"
	read applicationName

	for pod in $(kubectl get pods -l app=$applicationName -n $NAMESPACE -o=jsonpath='{.items[*].metadata.name}'); do
		
		kubectl logs $pod -n $NAMESPACE > "$(pwd)/restartedApplicationsLogs/${pod}_$timestamp.log"
		echo
		echo "Logs of pod $pod refreshed in file '$(pwd)/restartedApplicationsLogs/${pod}_$timestamp.log'"

	done

	kubectl rollout restart Deployment/$applicationName -n $NAMESPACE

	echo 
	echo 
	print_progress_bar

	echo 
	echo
	echo "$applicationName restart completed"

}

pod_shell() {

	clear

	show_connection_context

	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##                    ${BYellow}POD SHELL CONSOLE                ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	echo
	echo
	echo

	# Recent pods list
	if [[ ${#recent_pods[@]} -gt 0 ]]; then
		echo -e "${Blue}  ---------------- ${IBlue}RECENT PODS VIEWED ${Blue}-----------------  ${Color_Off}"
		echo
		for (( i = 0; i < ${#recent_pods[@]}; i++ )); do
			echo -e "  ${BYellow}$((i+1)).${Color_Off} ${recent_pods[i]}"
		done
		echo 
		echo -e "${Blue}  -----------------------------------------------------  ${Color_Off}"
		echo
	fi

	if [[ ${#recent_pods[@]} -gt 0 ]]; then
		if [[ -n "$selected_pod_name" ]]; then
			echo -e -n "${Cyan}Enter pod name, index or press enter to retrieve logs of pod ${BYellow}$selected_pod_name${Cyan}: ${Color_Off}"
		else
			echo -e -n "${Cyan}Enter pod name or index in recent pods viewed: ${Color_Off}"
		fi
		read podName

	else
		if [[ -n "$selected_pod_name" ]]; then
			echo -e -n "${Cyan}Enter pod name or press enter to retrieve logs of pod ${BYellow}$selected_pod_name${Cyan}: ${Color_Off}"
		else
			echo -e -n "${Cyan}Enter pod name: ${Color_Off}"
		fi
		read podName
	fi

	# Selection pod from recent pods
	if [[ "$podName" =~ ^[0-9]+$ ]]; then 
		echo
		echo
		# kubectl logs "${recent_pods[$((podName-1))]}" --namespace $NAMESPACE
		kubectl exec --stdin --tty "${recent_pods[$((podName-1))]}" -n $NAMESPACE -- /bin/bash
	
	# Selection pod by name
	else
		if [[ ! -n "$podName" ]]; then
			podName=$selected_pod_name
		fi
		echo
			# kubectl logs $podName --namespace $NAMESPACE
			kubectl exec --stdin --tty $podName -n $NAMESPACE -- /bin/bash

		if [[ ! " ${recent_pods[@]} " =~ " $podName " ]]; then
			recent_pods=("$podName" "${recent_pods[@]}")
			recent_pods=("${recent_pods[@]:0:5}")
		fi
	fi


	# echo -e -n "${Cyan}Enter pod name: ${Color_Off}"
	# read podName
	# kubectl exec --stdin --tty $podName --n $NAMESPACE -- /bin/bash
}

close_aks_helper() {

	clear
	echo -e "${Blue}#########################################################${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}##                   ${BYellow}CLOSING AKS HELPER                ${Blue}##${Color_Off}"
	echo -e "${Blue}##                                                     ##${Color_Off}"
	echo -e "${Blue}#########################################################${Color_Off}"
	clear
	exit 0

}

print_progress_bar() {
	local duration=180
	local width=40

	echo
	echo "Press 'q' to go back menu"
	echo

	for (( i = 0; i <= duration; i++ )); do
		percentage=$((i * 100 / duration))
		completed=$((percentage * width / 100))
		remaining=$((width - completed))

		printf "Progress: %d%% [" "$percentage"
		printf "%${completed}s" | tr " " "="
		printf "%${remaining}s" | tr " " " "
		printf "]"

		sleep 1
		printf "\r"

		echo
		read -t 1 -n 1 input
		if [[ $input = "q" ]]; then
			break
		fi
	done
}


if [[ -d "$(pwd)/aks-logs" ]]; then
	echo "$(pwd)/aks-logs directory already exists"
	cd "$(pwd)/aks-logs" || exit 1
else
	echo "$(pwd)/aks-logs does not exists, generating path"
	mkdir -p "$(pwd)/aks-logs"
	cd "$(pwd)/aks-logs" || exit 1
fi

while true; do

	context=$(kubectl config current-context)

	printf "\033]0; Kubernetes Helper \007"

	show_main_menu

	echo -e -n "${Cyan}Select an option pls: ${Color_Off}"
	read option

	case $option in 
		1) change_environment ;;
		2) change_namespace ;;
		
		3) show_pods ;;
		4) show_services_host ;;
		5) show_services_images ;;
		
		6) pod_logs ;;
		7) pod_logs_tmp_file ;;
		8) pod_logs_file_path ;;
		
		9) rollout_app ;;
		10) pod_shell ;; 

		99) print_progress_bar ;;
		
		0) close_aks_helper ;;
		*) echo "Unknown option selected, please enter a valid option"
	esac
	
	echo
	echo
	echo -e -n "${Cyan}Press enter to go back to main menu... ${Color_Off}"
	read 

done

